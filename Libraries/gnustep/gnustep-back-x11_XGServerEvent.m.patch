--- gnustep-back-0.24.1.orig/Source/x11/XGServerEvent.m	2015-03-22 17:15:20.000000000 +0200
+++ gnustep-back-0.24.1/Source/x11/XGServerEvent.m	2018-11-15 18:18:45.529305500 +0200
@@ -42,6 +42,7 @@
 #include <Foundation/NSUserDefaults.h>
 #include <Foundation/NSRunLoop.h>
 #include <Foundation/NSDebug.h>
+#include <Foundation/NSDistributedNotificationCenter.h>
 
 #include "x11/XGServerWindow.h"
 #include "x11/XGInputServer.h"
@@ -313,6 +314,12 @@
 
 /*
  */
+static NSInteger   clickTime;
+static NSInteger   clickMove;
+static NSInteger   mouseScrollMultiplier;
+static BOOL        swapMouseButtons;
+static NSEventType menuMouseButton;
+static BOOL        menuButtonEnabled;
 - (NSPoint) _XPointToOSPoint: (NSPoint)x for: (void*)window
 {
   gswindow_device_t *win = (gswindow_device_t*)window;
@@ -329,6 +336,54 @@
   return o;
 }
 
+- (void) initializeMouse
+{
+  [self mouseOptionsChanged:nil];
+  [[NSDistributedNotificationCenter defaultCenter]
+    addObserver: self
+       selector: @selector(mouseOptionsChanged:)
+           name: @"GSMouseOptionsDidChangeNotification"
+         object: nil];
+}
+
+- (void) mouseOptionsChanged: (NSNotification *)aNotif
+{
+  NSUserDefaults *defs = [NSUserDefaults standardUserDefaults];
+
+  [defs synchronize];
+
+  clickTime = [defs integerForKey:@"GSDoubleClickTime"];
+  if (clickTime < 250)
+    clickTime = 250;
+  
+  clickMove = [defs integerForKey:@"GSMouseMoveThreshold"];
+  if (clickMove < 3)
+    clickMove = 3;
+
+  mouseScrollMultiplier = [defs integerForKey:@"GSMouseScrollMultiplier"];
+  if (mouseScrollMultiplier == 0)
+    mouseScrollMultiplier = 1;
+
+  if ([defs objectForKey:@"GSMenuButtonEnabled"])
+    menuButtonEnabled = [defs boolForKey:@"GSMenuButtonEnabled"];
+  else
+    menuButtonEnabled = YES;
+
+  if ([defs objectForKey:@"GSMenuButtonEvent"])
+    menuMouseButton = [defs integerForKey:@"GSMenuButtonEvent"];
+  else
+    menuMouseButton = NSRightMouseDown;
+  
+  switch (menuMouseButton)
+    {
+    case NSLeftMouseDown:
+      swapMouseButtons = YES;
+      break;
+    default:
+      swapMouseButtons = NO;
+      break;
+    }
+}
 
 - (void) processEvent: (XEvent *) event
 {
@@ -367,21 +422,21 @@
          */
         {
           BOOL incrementCount = YES;
-
-#define CLICK_TIME 300
-#define CLICK_MOVE 3
+          
+          if (clickTime == 0) [self initializeMouse];
+         
           if (xEvent.xbutton.time
-            >= (unsigned long)(generic.lastClick + CLICK_TIME))
+            >= (unsigned long)(generic.lastClick + clickTime))
             incrementCount = NO;
           else if (generic.lastClickWindow != xEvent.xbutton.window)
             incrementCount = NO;
-          else if ((generic.lastClickX - xEvent.xbutton.x) > CLICK_MOVE)
+          else if ((generic.lastClickX - xEvent.xbutton.x) > clickMove)
             incrementCount = NO;
-          else if ((generic.lastClickX - xEvent.xbutton.x) < -CLICK_MOVE)
+          else if ((generic.lastClickX - xEvent.xbutton.x) < -clickMove)
             incrementCount = NO;
-          else if ((generic.lastClickY - xEvent.xbutton.y) > CLICK_MOVE)
+          else if ((generic.lastClickY - xEvent.xbutton.y) > clickMove)
             incrementCount = NO;
-          else if ((generic.lastClickY - xEvent.xbutton.y) < -CLICK_MOVE)
+          else if ((generic.lastClickY - xEvent.xbutton.y) < -clickMove)
             incrementCount = NO;
 
           if (incrementCount == YES)
@@ -408,14 +463,30 @@
 
         if (xEvent.xbutton.button == generic.lMouse)
           {
-            eventType = NSLeftMouseDown;
-            buttonNumber = generic.lMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSRightMouseDown;
+                buttonNumber = generic.rMouse;
+              }
+            else
+              {
+                eventType = NSLeftMouseDown;
+                buttonNumber = generic.lMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.rMouse
           && generic.rMouse != 0)
           {
-            eventType = NSRightMouseDown;
-            buttonNumber = generic.rMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSLeftMouseDown;
+                buttonNumber = generic.lMouse;
+              }
+            else
+              {
+                eventType = NSRightMouseDown;
+                buttonNumber = generic.rMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.mMouse
           && generic.mMouse != 0)
@@ -426,28 +497,28 @@
         else if (xEvent.xbutton.button == generic.upMouse
           && generic.upMouse != 0)
           {
-            deltaY = 1.;
+            deltaY = 1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.upMouse;
           }
         else if (xEvent.xbutton.button == generic.downMouse
           && generic.downMouse != 0)
           {
-            deltaY = -1.;
+            deltaY = -1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.downMouse;
           }
         else if (xEvent.xbutton.button == generic.scrollLeftMouse
           && generic.scrollLeftMouse != 0)
           {
-            deltaX = -1.;
+            deltaX = -1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.scrollLeftMouse;
           }
         else if (xEvent.xbutton.button == generic.scrollRightMouse
           && generic.scrollRightMouse != 0)
           {
-            deltaX = 1.;
+            deltaX = 1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.scrollRightMouse;
           }
@@ -456,6 +527,9 @@
             break;                /* Unknown button */
           }
 
+        if (menuButtonEnabled == NO && eventType == menuMouseButton)
+          break; // disabled menu button was pressed
+
         eventFlags = process_modifier_flags(xEvent.xbutton.state);
         // if pointer is grabbed use grab window
         xWin = (grabWindow == 0) ? xEvent.xbutton.window : grabWindow;
@@ -511,14 +585,30 @@
         [self setLastTime: xEvent.xbutton.time];
         if (xEvent.xbutton.button == generic.lMouse)
           {
-            eventType = NSLeftMouseUp;
-            buttonNumber = generic.lMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSRightMouseUp;
+                buttonNumber = generic.rMouse;
+              }
+            else
+              {
+                eventType = NSLeftMouseUp;
+                buttonNumber = generic.lMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.rMouse
           && generic.rMouse != 0)
           {
-            eventType = NSRightMouseUp;
-            buttonNumber = generic.rMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSLeftMouseUp;
+                buttonNumber = generic.lMouse;
+              }
+            else
+              {
+                eventType = NSRightMouseUp;
+                buttonNumber = generic.rMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.mMouse
           && generic.mMouse != 0)
@@ -621,6 +711,20 @@
                                data1: 0
                                data2: 0];
                 }
+              else if ((Atom)xEvent.xclient.data.l[0] == generic.hide_app_atom)
+                {
+		  NSDebugLLog(@"Hide", @"%lu application will be hidden", cWin->number);
+                  eventLocation = NSMakePoint(0,0);
+                  e = [NSEvent otherEventWithType: NSAppKitDefined
+                               location: eventLocation
+                               modifierFlags: 0
+                               timestamp: 0
+                               windowNumber: cWin->number
+                               context: gcontext
+                               subtype: GSAppKitAppHide
+                               data1: 0
+                               data2: 0];
+                }
               else if ((Atom)xEvent.xclient.data.l[0]
                 == generic.take_focus_atom)
                 {
@@ -1099,6 +1203,7 @@
       case FocusIn:
         NSDebugLLog(@"NSEvent", @"%lu FocusIn\n",
                     xEvent.xfocus.window);
+        NSLog(@"[FocusIn] %lu", xEvent.xfocus.window);
         if (cWin == 0 || xEvent.xfocus.window != cWin->ident)
           {
             generic.cachedWindow
@@ -1106,10 +1211,13 @@
           }
         if (cWin == 0)
           break;
+        
         NSDebugLLog(@"Focus", @"%lu got focus on %lu\n",
                     xEvent.xfocus.window, cWin->number);
+        NSLog(@"[FocusIn] %lu got focus on %lu", xEvent.xfocus.window, cWin->number);
         // Store this for debugging, may not be the real focus window
         generic.currentFocusWindow = cWin->number;
+        generic.desiredFocusWindow = cWin->number;
         if (xEvent.xfocus.serial == generic.focusRequestNumber)
           {
             /*
@@ -1135,8 +1243,8 @@
            * If it has gone to a window - we see if it is one of ours.
            */
           XGetInputFocus(xEvent.xfocus.display, &fw, &rev);
-          NSDebugLLog(@"NSEvent", @"%lu FocusOut\n",
-                      xEvent.xfocus.window);
+          NSDebugLLog(@"NSEvent", @"%lu FocusOut\n", xEvent.xfocus.window);
+          NSLog(@"[FocusOut] from %lu to %lu", xEvent.xfocus.window, fw);
           if (fw != None && fw != PointerRoot)
             {
               generic.cachedWindow = [XGServer _windowForXWindow: fw];
@@ -1774,28 +1882,28 @@
 - (NSEvent *)_handleTakeFocusAtom: (XEvent)xEvent 
                        forContext: (NSGraphicsContext *)gcontext
 {
+ long current_num, desired_num;
   int key_num;
   NSWindow *key_win;
+  gswindow_device_t *keyWin;
   NSEvent *e = nil;
   key_win = [NSApp keyWindow];
   key_num = [key_win windowNumber];
-  NSDebugLLog(@"Focus", @"take focus:%lu (current=%lu key=%d)",
-              cWin->number, generic.currentFocusWindow, key_num);
+  keyWin =  [XGServer _windowWithTag:key_num];
 
-  /* Sometimes window managers lose the setinputfocus on the key window
-   * e.g. when ordering out a window with focus then ordering in the key window.   
-   * it might search for a window until one accepts its take focus request.
-   */
-  if (key_num == cWin->number)
-    cWin->ignore_take_focus = NO;
-  
-  /* Invalidate the previous request. It's possible the app lost focus
-     before this request was fufilled and we are being focused again,
-     or ??? */
+  NSDebugLLog(@"Focus", @"take focus:%lu  (current=%lu key=%d)",
+              cWin->number, generic.currentFocusWindow, key_num);
   {
-    generic.focusRequestNumber = 0;
-    generic.desiredFocusWindow = 0;
+    current_num = generic.currentFocusWindow;
+    desired_num = generic.desiredFocusWindow;
+    NSLog(@"[TakeFocus] %lu(%li) {%.0f x %.0f} (current=%lu(%lu) desired=%lu(%lu) key=%lu(%d))",
+          cWin->ident, cWin->number,
+          cWin->xframe.size.width, cWin->xframe.size.height,
+          [XGServer _windowWithTag:current_num]->ident, current_num,
+          [XGServer _windowWithTag:desired_num]->ident, desired_num,
+          keyWin->ident, key_num);
   }
+
   /* We'd like to send this event directly to the front-end to handle,
      but the front-end polls events so slowly compared the speed at
      which X events could potentially come that we could easily get
@@ -1808,29 +1916,74 @@
          window to take focus after each one gets hidden. */
       NSDebugLLog(@"Focus", @"WM take focus while hiding");
     }
-  else if (cWin->ignore_take_focus == YES)
+  else if ([[NSApp mainMenu] isTransient] != NO) // right-click main menu
     {
-      NSDebugLLog(@"Focus", @"Ignoring window focus request");
-      cWin->ignore_take_focus = NO;
+      /* Do not grab focus from active application if right-click on our 
+         application icon was performed. */
+      NSLog(@"[TakeFocus] ignore request for transient application menu.");
+      generic.focusRequestNumber = 0;
+      generic.desiredFocusWindow = 0;
     }
-  else if (cWin->number == key_num)
+  else if (cWin->number == key_num) // already key window
     {
       NSDebugLLog(@"Focus", @"Reasserting key window");
-      [GSServerForWindow(key_win) setinputfocus: key_num];
+      cWin->ignore_take_focus = NO;
+      NSLog(@"[TakeFocus] %lu(%i): is already a key. Do nothing.", keyWin->ident, key_num);
     }
-  else if (key_num 
-           && cWin->number == [[[NSApp mainMenu] window] windowNumber])
+  else if (cWin->ignore_take_focus == YES) // after orderwindow:::
+    {
+      NSLog(@"[TakeFocus] %lu(%li): ignore_take_focus == YES...", cWin->ident, cWin->number);
+      /* Window was requested to take focus and earlier (orderwindow:::) 
+         was instructed to ignore "Take Focus" requests. Normally, we must 
+         ignore this request.
+         However, key window was unmapped by window manager. In WindowMaker it happens 
+         after workspace switch. We should grab focus to have keyboard input. */
+      if (key_num && keyWin->map_state == IsUnmapped) {
+        NSLog(@"[TakeFocus] ...%lu(%li): key window was unmapped - setinputfocus to self",
+              cWin->ident, cWin->number);
+        [GSServerForWindow(key_win) setinputfocus: cWin->number];
+      }
+      
+      cWin->ignore_take_focus = NO;
+    }
+  else if (key_win &&
+           cWin->number == [[[NSApp mainMenu] window] windowNumber]) // main menu
     {
       /* This might occur when the window manager just wants someone
          to become key, so it tells the main menu (typically the first
          menu in the list), but since we already have a window that
          was key before, use that instead */
       NSDebugLLog(@"Focus", @"Key window is already %d", key_num);
-      [GSServerForWindow(key_win) setinputfocus: key_num];
+      NSLog(@"[TakeFocus] %lu(%li): main menu. Key window is already set to: %lu(%d)...",
+            cWin->ident, cWin->number, keyWin->ident, key_num);
+      
+      if (keyWin->map_state == IsUnmapped) {
+        NSLog(@"[TakeFocus] ...%lu(%li): key window was unmapped - setinputfocus to self",
+              cWin->ident, cWin->number);
+        [GSServerForWindow(key_win) setinputfocus: cWin->number];
+      }
+      else {
+        /* If key window is visible and didn't received TakeFocus message yet
+           set input focus to it. Otherwise, if application will be deactivated 
+           and key window receive TakeFocus, nothing happens because:
+           - NSApplication resigns key window on deactivation;
+           - key window has `ignore_take_focus == YES`;
+           So click on key window of inactive application will be ignored 
+           because of ignore_take_focus == YES.
+           Test to observe incorrect behaviour without code below in NEXTSPACE:
+           - workspace 1, Workspace app active;
+           - switch to workspace 2 - Workspace app menu only visible;
+           - switch back to workspace 1 - Workspace app active;
+           - launch menu-only app - TextEdit;
+           - click on titlebar of unfocused "File Viewer".
+         */
+        NSLog(@"[TakeFocus] ...%lu(%li):  setinputfocus to key: %lu(%d)",
+              cWin->ident, cWin->number, keyWin->ident, key_num);
+        [GSServerForWindow(key_win) setinputfocus: key_num];
+      }
     }
   else
     {
-      NSPoint eventLocation;
       /*
        * Here the app asked for this (if key_win==nil) or there was a
        * click on the title bar or some other reason (window mapped,
@@ -1838,17 +1991,24 @@
        * last reason but we just have to deal with that since we can
        * never be sure if it's necessary.
        */
-      eventLocation = NSMakePoint(0,0);
-      e = [NSEvent otherEventWithType:NSAppKitDefined
-                   location: eventLocation
-                   modifierFlags: 0
-                   timestamp: 0
-                   windowNumber: cWin->number
-                   context: gcontext
-                   subtype: GSAppKitWindowFocusIn
-                   data1: 0
-                   data2: 0];
+      NSLog(@"[TakeFocus] Creating NSEvent for: %lu(%li)", cWin->ident, cWin->number);
+      e = [NSEvent otherEventWithType: NSAppKitDefined
+                             location: NSMakePoint(0,0)
+                        modifierFlags: 0
+                            timestamp: 0
+                         windowNumber: cWin->number
+                              context: gcontext
+                              subtype: GSAppKitWindowFocusIn
+                                data1: 0
+                                data2: 0];
     }
+  
+  /* Invalidate the previous request. It's possible the app lost focus
+     before this request was fufilled and we are being focused again,
+     or ??? */
+  generic.focusRequestNumber = 0;
+  generic.desiredFocusWindow = 0;
+  
   return e;
 }
 
