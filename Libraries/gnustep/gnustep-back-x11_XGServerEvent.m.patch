--- gnustep-back-0.24.1.orig/Source/x11/XGServerEvent.m	2015-03-22 17:15:20.000000000 +0200
+++ gnustep-back-0.24.1/Source/x11/XGServerEvent.m	2018-11-09 23:28:41.266917204 +0200
@@ -42,6 +42,7 @@
 #include <Foundation/NSUserDefaults.h>
 #include <Foundation/NSRunLoop.h>
 #include <Foundation/NSDebug.h>
+#include <Foundation/NSDistributedNotificationCenter.h>
 
 #include "x11/XGServerWindow.h"
 #include "x11/XGInputServer.h"
@@ -313,6 +314,12 @@
 
 /*
  */
+static NSInteger   clickTime;
+static NSInteger   clickMove;
+static NSInteger   mouseScrollMultiplier;
+static BOOL        swapMouseButtons;
+static NSEventType menuMouseButton;
+static BOOL        menuButtonEnabled;
 - (NSPoint) _XPointToOSPoint: (NSPoint)x for: (void*)window
 {
   gswindow_device_t *win = (gswindow_device_t*)window;
@@ -329,6 +336,54 @@
   return o;
 }
 
+- (void) initializeMouse
+{
+  [self mouseOptionsChanged:nil];
+  [[NSDistributedNotificationCenter defaultCenter]
+    addObserver: self
+       selector: @selector(mouseOptionsChanged:)
+           name: @"GSMouseOptionsDidChangeNotification"
+         object: nil];
+}
+
+- (void) mouseOptionsChanged: (NSNotification *)aNotif
+{
+  NSUserDefaults *defs = [NSUserDefaults standardUserDefaults];
+
+  [defs synchronize];
+
+  clickTime = [defs integerForKey:@"GSDoubleClickTime"];
+  if (clickTime < 250)
+    clickTime = 250;
+  
+  clickMove = [defs integerForKey:@"GSMouseMoveThreshold"];
+  if (clickMove < 3)
+    clickMove = 3;
+
+  mouseScrollMultiplier = [defs integerForKey:@"GSMouseScrollMultiplier"];
+  if (mouseScrollMultiplier == 0)
+    mouseScrollMultiplier = 1;
+
+  if ([defs objectForKey:@"GSMenuButtonEnabled"])
+    menuButtonEnabled = [defs boolForKey:@"GSMenuButtonEnabled"];
+  else
+    menuButtonEnabled = YES;
+
+  if ([defs objectForKey:@"GSMenuButtonEvent"])
+    menuMouseButton = [defs integerForKey:@"GSMenuButtonEvent"];
+  else
+    menuMouseButton = NSRightMouseDown;
+  
+  switch (menuMouseButton)
+    {
+    case NSLeftMouseDown:
+      swapMouseButtons = YES;
+      break;
+    default:
+      swapMouseButtons = NO;
+      break;
+    }
+}
 
 - (void) processEvent: (XEvent *) event
 {
@@ -367,21 +422,21 @@
          */
         {
           BOOL incrementCount = YES;
-
-#define CLICK_TIME 300
-#define CLICK_MOVE 3
+          
+          if (clickTime == 0) [self initializeMouse];
+         
           if (xEvent.xbutton.time
-            >= (unsigned long)(generic.lastClick + CLICK_TIME))
+            >= (unsigned long)(generic.lastClick + clickTime))
             incrementCount = NO;
           else if (generic.lastClickWindow != xEvent.xbutton.window)
             incrementCount = NO;
-          else if ((generic.lastClickX - xEvent.xbutton.x) > CLICK_MOVE)
+          else if ((generic.lastClickX - xEvent.xbutton.x) > clickMove)
             incrementCount = NO;
-          else if ((generic.lastClickX - xEvent.xbutton.x) < -CLICK_MOVE)
+          else if ((generic.lastClickX - xEvent.xbutton.x) < -clickMove)
             incrementCount = NO;
-          else if ((generic.lastClickY - xEvent.xbutton.y) > CLICK_MOVE)
+          else if ((generic.lastClickY - xEvent.xbutton.y) > clickMove)
             incrementCount = NO;
-          else if ((generic.lastClickY - xEvent.xbutton.y) < -CLICK_MOVE)
+          else if ((generic.lastClickY - xEvent.xbutton.y) < -clickMove)
             incrementCount = NO;
 
           if (incrementCount == YES)
@@ -408,14 +463,30 @@
 
         if (xEvent.xbutton.button == generic.lMouse)
           {
-            eventType = NSLeftMouseDown;
-            buttonNumber = generic.lMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSRightMouseDown;
+                buttonNumber = generic.rMouse;
+              }
+            else
+              {
+                eventType = NSLeftMouseDown;
+                buttonNumber = generic.lMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.rMouse
           && generic.rMouse != 0)
           {
-            eventType = NSRightMouseDown;
-            buttonNumber = generic.rMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSLeftMouseDown;
+                buttonNumber = generic.lMouse;
+              }
+            else
+              {
+                eventType = NSRightMouseDown;
+                buttonNumber = generic.rMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.mMouse
           && generic.mMouse != 0)
@@ -426,28 +497,28 @@
         else if (xEvent.xbutton.button == generic.upMouse
           && generic.upMouse != 0)
           {
-            deltaY = 1.;
+            deltaY = 1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.upMouse;
           }
         else if (xEvent.xbutton.button == generic.downMouse
           && generic.downMouse != 0)
           {
-            deltaY = -1.;
+            deltaY = -1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.downMouse;
           }
         else if (xEvent.xbutton.button == generic.scrollLeftMouse
           && generic.scrollLeftMouse != 0)
           {
-            deltaX = -1.;
+            deltaX = -1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.scrollLeftMouse;
           }
         else if (xEvent.xbutton.button == generic.scrollRightMouse
           && generic.scrollRightMouse != 0)
           {
-            deltaX = 1.;
+            deltaX = 1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.scrollRightMouse;
           }
@@ -456,6 +527,9 @@
             break;                /* Unknown button */
           }
 
+        if (menuButtonEnabled == NO && eventType == menuMouseButton)
+          break; // disabled menu button was pressed
+
         eventFlags = process_modifier_flags(xEvent.xbutton.state);
         // if pointer is grabbed use grab window
         xWin = (grabWindow == 0) ? xEvent.xbutton.window : grabWindow;
@@ -511,14 +585,30 @@
         [self setLastTime: xEvent.xbutton.time];
         if (xEvent.xbutton.button == generic.lMouse)
           {
-            eventType = NSLeftMouseUp;
-            buttonNumber = generic.lMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSRightMouseUp;
+                buttonNumber = generic.rMouse;
+              }
+            else
+              {
+                eventType = NSLeftMouseUp;
+                buttonNumber = generic.lMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.rMouse
           && generic.rMouse != 0)
           {
-            eventType = NSRightMouseUp;
-            buttonNumber = generic.rMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSLeftMouseUp;
+                buttonNumber = generic.lMouse;
+              }
+            else
+              {
+                eventType = NSRightMouseUp;
+                buttonNumber = generic.rMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.mMouse
           && generic.mMouse != 0)
@@ -621,6 +711,20 @@
                                data1: 0
                                data2: 0];
                 }
+              else if ((Atom)xEvent.xclient.data.l[0] == generic.hide_app_atom)
+                {
+		  NSDebugLLog(@"Hide", @"%lu application will be hidden", cWin->number);
+                  eventLocation = NSMakePoint(0,0);
+                  e = [NSEvent otherEventWithType: NSAppKitDefined
+                               location: eventLocation
+                               modifierFlags: 0
+                               timestamp: 0
+                               windowNumber: cWin->number
+                               context: gcontext
+                               subtype: GSAppKitAppHide
+                               data1: 0
+                               data2: 0];
+                }
               else if ((Atom)xEvent.xclient.data.l[0]
                 == generic.take_focus_atom)
                 {
@@ -1782,20 +1886,12 @@
   NSDebugLLog(@"Focus", @"take focus:%lu (current=%lu key=%d)",
               cWin->number, generic.currentFocusWindow, key_num);
 
-  /* Sometimes window managers lose the setinputfocus on the key window
-   * e.g. when ordering out a window with focus then ordering in the key window.   
-   * it might search for a window until one accepts its take focus request.
-   */
-  if (key_num == cWin->number)
-    cWin->ignore_take_focus = NO;
-  
   /* Invalidate the previous request. It's possible the app lost focus
      before this request was fufilled and we are being focused again,
      or ??? */
-  {
-    generic.focusRequestNumber = 0;
-    generic.desiredFocusWindow = 0;
-  }
+  generic.focusRequestNumber = 0;
+  generic.desiredFocusWindow = 0;
+  
   /* We'd like to send this event directly to the front-end to handle,
      but the front-end polls events so slowly compared the speed at
      which X events could potentially come that we could easily get
@@ -1808,29 +1904,60 @@
          window to take focus after each one gets hidden. */
       NSDebugLLog(@"Focus", @"WM take focus while hiding");
     }
-  else if (cWin->ignore_take_focus == YES)
+  else if (cWin->number == key_num)
     {
-      NSDebugLLog(@"Focus", @"Ignoring window focus request");
+      NSDebugLLog(@"Focus", @"Reasserting key window");
       cWin->ignore_take_focus = NO;
+      // NSLog(@"[TakeFocus] %lu(%i): is already a key. Do nothing.",
+      //       [XGServer _windowWithTag:key_num]->ident, key_num);
+      
+      /* [GSServerForWindow(key_win) setinputfocus: key_num]; */
     }
-  else if (cWin->number == key_num)
+  else if (cWin->ignore_take_focus == YES)
     {
-      NSDebugLLog(@"Focus", @"Reasserting key window");
-      [GSServerForWindow(key_win) setinputfocus: key_num];
+      // int menu_num = [[[NSApp mainMenu] window] windowNumber];
+      // gswindow_device_t *menuWin = [XGServer _windowWithTag:menu_num];
+      gswindow_device_t *keyWin = [XGServer _windowWithTag:key_num];
+      
+      NSDebugLLog(@"Focus", @"Ignoring window focus request");
+      // NSLog(@"[TakeFocus] %lu(%li): ignore_take_focus == YES", cWin->ident, cWin->number);
+      
+      if (generic.currentFocusWindow == 0) {
+        // NSLog(@"[TakeFocus] %lu(%li): no currently focused window...", cWin->ident, cWin->number);
+        if (cWin->number != key_num)
+          {
+            // NSLog(@"[TakeFocus] %lu(%li): ...setting to self", cWin->ident, cWin->number);
+            [GSServerForWindow(key_win) setinputfocus: cWin->number];
+          }
+        if (key_num && keyWin->map_state)
+          {
+            // NSLog(@"[TakeFocus] ...and I have a visible key: %lu(%i) map_state: %i",
+            //       keyWin->ident, key_num, keyWin->map_state);
+            [GSServerForWindow(key_win) setinputfocus: key_num];
+          }
+      }
+      else {
+        // NSLog(@"[TakeFocus] Ignoring request. cWin: %lu(%li) Key window: %lu(%d) Menu:%lu(%d)",
+        //       cWin->ident, cWin->number, keyWin->ident, key_num, menuWin->ident, menu_num);
+      }
+      
+      cWin->ignore_take_focus = NO;
+      
+      /* [GSServerForWindow(key_win) setinputfocus: cWin->number]; */
     }
-  else if (key_num 
-           && cWin->number == [[[NSApp mainMenu] window] windowNumber])
+  else if (key_num && cWin->number == [[[NSApp mainMenu] window] windowNumber])
     {
       /* This might occur when the window manager just wants someone
          to become key, so it tells the main menu (typically the first
          menu in the list), but since we already have a window that
          was key before, use that instead */
       NSDebugLLog(@"Focus", @"Key window is already %d", key_num);
+      // NSLog(@"[TakeFocus] Request to main menu. Key window is already set to: %lu(%d)",
+      //       [XGServer _windowWithTag:key_num]->ident, key_num);
       [GSServerForWindow(key_win) setinputfocus: key_num];
     }
   else
     {
-      NSPoint eventLocation;
       /*
        * Here the app asked for this (if key_win==nil) or there was a
        * click on the title bar or some other reason (window mapped,
@@ -1838,16 +1965,15 @@
        * last reason but we just have to deal with that since we can
        * never be sure if it's necessary.
        */
-      eventLocation = NSMakePoint(0,0);
-      e = [NSEvent otherEventWithType:NSAppKitDefined
-                   location: eventLocation
-                   modifierFlags: 0
-                   timestamp: 0
-                   windowNumber: cWin->number
-                   context: gcontext
-                   subtype: GSAppKitWindowFocusIn
-                   data1: 0
-                   data2: 0];
+      e = [NSEvent otherEventWithType: NSAppKitDefined
+                             location: NSMakePoint(0,0)
+                        modifierFlags: 0
+                            timestamp: 0
+                         windowNumber: cWin->number
+                              context: gcontext
+                              subtype: GSAppKitWindowFocusIn
+                                data1: 0
+                                data2: 0];
     }
   return e;
 }
